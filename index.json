[{"content":"","date":null,"permalink":"/","section":"","summary":"","title":""},{"content":"","date":null,"permalink":"/posts/","section":"","summary":"","title":""},{"content":" Há algum tempo venho pensando em escrever sobre o assunto que traterei neste post. A verdade é que ele era para ter sido publicado no mês de setembro, para casar com as mensagens do Setembro Amarelo, mas eu ainda não conseguia escrever sobre. As ideias estavam na cabeça, mas a vontade de escrever não vinha. A verdade é que a ideia de escrever sobre isso veio há dois anos atrás, quando alguns eventos em minha vida profissional me fizeram questionar muitos aspectos sobre a responsabilidade da minha saúde mental.\nTudo o que escrevo aqui é baseado em minha própria experiência no assunto, sem algum tipo de pretensão de ser\nEu convivo com a depressão a pouco mais de 10 anos agora. Já foi muito ruim, não que hoje não seja, mas você aprende a conviver com esta realidade.\n","date":"13 dezembro 2022","permalink":"/posts/bom-dia-time-como-estamos/","section":"","summary":"Há algum tempo venho pensando em escrever sobre o assunto que traterei neste post. A verdade é que ele era para ter sido publicado no mês de setembro, para casar com as mensagens do Setembro Amarelo, mas eu ainda não conseguia escrever sobre.","title":"Bom dia time! Como estamos?"},{"content":"","date":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":null,"permalink":"/tags/personal-improvement/","section":"Tags","summary":"","title":"Personal-Improvement"},{"content":"","date":null,"permalink":"/categories/random/","section":"Categories","summary":"","title":"Random"},{"content":"","date":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"Deploy Cert Manager #kubectl create ns cert-manager helm repo add jetstack https://charts.jetstack.io helm repo update helm install \\ cert-manager jetstack/cert-manager \\ -n cert-manager \\ --version v1.1.0 \\ --set installCRDs=true openssl genrsa -out ca.key 2048 openssl req -x509 -new -nodes -key ca.key -subj \u0026#34;/CN=integr8.me\u0026#34; -days 3650 -reqexts v3_req -extensions v3_ca -out ca.crt kubectl create secret tls integr8-ca-key-pair \\ -n cert-manager \\ --cert=ca.crt \\ --key=ca.key \\ apiVersion: cert-manager.io/v1 kind: ClusterIssuer metadata: name: integr8me namespace: sandbox spec: ca: secretName: integr8-ca-key-pair crlDistributionPoints: - \u0026#34;https://integr8.me\u0026#34; kubectl apply \\ -n cert-manager \\ -f cert-manager-cluster-issuer.yml kubectl create ns tekton-pipelines kubectl apply \\ -n tekton-pipelines \\ -f https://storage.googleapis.com/tekton-releases/pipeline/latest/release.yaml \\ -f https://storage.googleapis.com/tekton-releases/triggers/latest/release.yaml \\ -f https://github.com/tektoncd/dashboard/releases/latest/download/tekton-dashboard-release.yaml \\ -f tekton-ingress-dashboard.yml kubectl create ns tekton-builds kubectl apply -n tekton-builds -f rbac-and-account.yml apiVersion: v1 kind: ServiceAccount metadata: name: tekton-triggers-sa secrets: - name: gh-token --- apiVersion: rbac.authorization.k8s.io/v1 kind: Role metadata: name: tekton-triggers-roles rules: - apiGroups: [\u0026#34;triggers.tekton.dev\u0026#34;] resources: [\u0026#34;eventlisteners\u0026#34;, \u0026#34;triggerbindings\u0026#34;, \u0026#34;triggertemplates\u0026#34;, \u0026#34;triggers\u0026#34;] verbs: [\u0026#34;get\u0026#34;, \u0026#34;list\u0026#34;, \u0026#34;watch\u0026#34;] - apiGroups: [\u0026#34;\u0026#34;] resources: [\u0026#34;configmaps\u0026#34;, \u0026#34;secrets\u0026#34;] verbs: [\u0026#34;get\u0026#34;, \u0026#34;list\u0026#34;, \u0026#34;watch\u0026#34;] - apiGroups: [\u0026#34;tekton.dev\u0026#34;] resources: [\u0026#34;pipelineruns\u0026#34;, \u0026#34;pipelineresources\u0026#34;, \u0026#34;taskruns\u0026#34;] verbs: [\u0026#34;create\u0026#34;] - apiGroups: [\u0026#34;\u0026#34;] resources: [\u0026#34;serviceaccounts\u0026#34;] verbs: [\u0026#34;impersonate\u0026#34;] - apiGroups: [\u0026#34;policy\u0026#34;] resources: [\u0026#34;podsecuritypolicies\u0026#34;] resourceNames: [\u0026#34;tekton-triggers\u0026#34;] verbs: [\u0026#34;use\u0026#34;] --- apiVersion: rbac.authorization.k8s.io/v1 kind: RoleBinding metadata: name: tekton-triggers-binding subjects: - kind: ServiceAccount name: tekton-triggers-sa roleRef: apiGroup: rbac.authorization.k8s.io kind: Role name: tekton-triggers-roles --- kind: ClusterRole apiVersion: rbac.authorization.k8s.io/v1 metadata: name: tekton-triggers-clusterrole rules: - apiGroups: [\u0026#34;triggers.tekton.dev\u0026#34;] resources: [\u0026#34;clustertriggerbindings\u0026#34;] verbs: [\u0026#34;get\u0026#34;, \u0026#34;list\u0026#34;, \u0026#34;watch\u0026#34;] --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRoleBinding metadata: name: tekton-triggers-clusterrolebinding subjects: - kind: ServiceAccount name: tekton-triggers-sa namespace: tekton-builds roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: tekton-triggers-clusterrole ","date":"1 março 2021","permalink":"/posts/tekton-instalation/","section":"","summary":"Deploy Cert Manager #kubectl create ns cert-manager helm repo add jetstack https://charts.jetstack.io helm repo update helm install \\ cert-manager jetstack/cert-manager \\ -n cert-manager \\ --version v1.1.0 \\ --set installCRDs=true openssl genrsa -out ca.","title":"Pipelines com o Tekton - Instalação"},{"content":" Características É um projeto Open Source mantido pela CNCF\nTodas os elementos são objetos do Kubernetes\nÉ focado em reutilização(TriggerBinding, TriggerTemplate, Pipeline, Task)\nSeu funcionamento se dá pela implementação de `CRD`s(Custom Resource Definition) customizados para cada um dos elementos descritos posteriormente.\nEcossistema Tekton Triggers - Pacote com os CRDs referentes a escuta de eventos e como respondê-los;\n[Tekton Pipelines](https://tekton.dev/docs/pipelines/) - Pacote com os CRDs referentes a construção de tasks, recursos e elementos referentes a pipeline;\n[Tekton Dashboard](https://tekton.dev/docs/dashboard/) - Interface para consumir informações de execuções de pipelines;\n[Tekton Hub](https://hub-preview.tekton.dev/) - Coleção de tasks disponíveis para execução de determinadas tarefas;\n[CLI Tool](https://tekton.dev/docs/cli/) - Ferramenta de linha de comando para consumir informações e executar ações no ecossistema;\nTekton Triggers [EventListener](https://tekton.dev/docs/triggers/eventlisteners/) - Elemento responsável por interceptar as requisições feitas ao endereço do Ingress;\n[Trigger](https://tekton.dev/docs/triggers/triggers/) - Elemento responsável por configurar os gatilhos que ativarão determinadas `TriggerTemplate`s;\n[TriggerBinding](https://tekton.dev/docs/triggers/triggerbindings/) - Permite a captura de informações de um evento, e transformação em um parâmetro consumível pela Pipeline;\n[TriggerTemplate](https://tekton.dev/docs/triggers/triggertemplates/) - Cria um template de invocação de algum elemento do pacote de pipelines. (Eg. PipelineRun, TaskRun).\nEventListener Cria uma Service que pode ser anexado a um Ingress para receber requisições externas (eg. Endereço utilizado no webhook do repositório);\nÉ a entidade que aglomerá os Trigger`s que tratarão as requisições ao `EventListener.\nTrigger O chaveamento entre qual pipeline deve ser executada é feito utilizando `interceptor`s;\nPor padrão possui interceptors para Github, Gitlab, Github e CEL.\nO interceptor CEL é o mais versátil, definindo filtros e overlays às informações.\nFiltros: Informa quais campos da requisição vai disparar o gatilho. (eg. \u0026#34;header.match(\u0026#39;X-GitHub-Event\u0026#39;, \u0026#39;pull_request\u0026#39;)\u0026#34;);\nOverlays: Executa transformações em campos da requisição, para consumo na pipeline. (eg. \u0026#34;body.pull_request.head.sha.truncate(7)\u0026#34;).\nTriggerBinding Traduz campos da requisição para parâmetros que serão consumidos na pipeline.\nOs campos do envolope HTTP disponíveis são os Headers e Body.\n* name: triggered-event value: $(header.X-Github-Event) * name: event-action value: $(body.action) TriggerTemplate Neste objeto são configurados os templates padrão para cada evento disparado em um dos Triggers;\nRecebe os parâmetros de uma TriggerBinding e os atribui a um PipelineRun ou TaskRun;\nTekton workflow diagram Tekton Pipelines [Pipeline](https://tekton.dev/docs/pipelines/pipelines/) - Objeto que agrupa `Task`s comuns à pipeline;\n[PipelineRun](https://tekton.dev/docs/pipelines/pipelineruns/) - Instancia e executa uma Pipeline;\n[PipelineResource](https://tekton.dev/docs/pipelines/resources/) - Objetos que serão utilizados como entradas/saídas de uma Task;\n[Task](https://tekton.dev/docs/pipelines/tasks/) - É uma coleção de Steps a serem executados para conclusão de uma determinada tarefa;\n[TaskRun](https://tekton.dev/docs/pipelines/taskruns/) - Instancia e executa uma determinada Task;\nPipeline Agrupa Tasks para um fim específico;\nOs parâmetros são inputados por um objeto PipelineRun;\nPode possuir recursos que são esperados.(Eg. repositório, pullrequest, imagem docker)\nVários repositórios podem consumir a mesma pipeline, com parâmetros diferentes.\nOs volumes, utilizados para transição de informações entre Tasks são denominados workspaces.\nWorkspaces podem ser utilizados para reutilizar bibliotecas e acelerar o processo de build (node_modules(nodejs/frontend), .terraform(:P), .m2(JAVA), vendor(PHP))\nPipelineResource Ajudam a abstrair os recursos consumidos por uma Pipeline/Task;\nPodem ser de entrada(input), ou de saída(output);\nPodem ser dos tipos: Git, PullRequest, Image, Cluster, GCS e CloudEvent.\nTask O padrão [init-container](https://www.magalix.com/blog/kubernetes-patterns-the-init-container-pattern) é utilizado para garantir a execução ordenada das tasks\nÉ executada em um Pod no cluster;\nPossui uma versão que transpõem o namespace ClusterTask;\nCada Step dentro de uma Task é traduzido em um container sendo executado.\nComo um objeto do Kubernetes, pode consumir outros objetos, como ConfigMaps e Secrets.\napiVersion: tekton.dev/v1beta1 kind: ClusterTask metadata: name: webhook-debug annotations: description: | Imprime as informações informadas pelo webhook spec: params: - name: pipelinerun-name description: Nome do pipelinerun executado - name: repo-name description: Nome do repositório steps: - name: print-webhook-informations image: alpine:latest script: | #!/usr/bin/env sh echo \u0026#34;$(inputs.params.pipelinerun-name)\u0026#34; echo \u0026#34;$(inputs.params.repo-name)\u0026#34; graph TD; PipelineRun --\u0026gt;|Instancia uma pipeline com determinados parâmetros| Pipeline; Pipeline --\u0026gt;|Instancia uma lista de tarefas| TaskRun; TaskRun --\u0026gt;|Instancia uma tarefa| Task; Task --\u0026gt;|Executa procedimentos para execução de uma tarefa| Steps; ","date":"1 março 2021","permalink":"/posts/tekton-introduction/","section":"","summary":"Características É um projeto Open Source mantido pela CNCF\nTodas os elementos são objetos do Kubernetes\nÉ focado em reutilização(TriggerBinding, TriggerTemplate, Pipeline, Task)\nSeu funcionamento se dá pela implementação de `CRD`s(Custom Resource Definition) customizados para cada um dos elementos descritos posteriormente.","title":"Pipelines com o Tekton - Introdução"},{"content":"","date":null,"permalink":"/tags/tekton/","section":"Tags","summary":"","title":"Tekton"},{"content":"","date":null,"permalink":"/categories/tekton/","section":"Categories","summary":"","title":"Tekton"},{"content":"","date":null,"permalink":"/tags/advanced/","section":"Tags","summary":"","title":"Advanced"},{"content":"There are many ways you can make advanced changes to Congo. Read below to learn more about what can be customised and the best way of achieving your desired result.\nIf you need further advice, post your questions on GitHub Discussions.\nHugo project structure #Before leaping into it, first a quick note about Hugo project structure and best practices for managing your content and theme customisations.\nIn summary: Never directly edit the theme files. Only make customisations in your Hugo project\u0026rsquo;s sub-directories, not in the themes directory itself. Congo is built to take advantage of all the standard Hugo practices. It is designed to allow all aspects of the theme to be customised and overridden without changing any of the core theme files. This allows for a seamless upgrade experience while giving you total control over the look and feel of your website.\nIn order to achieve this, you should never manually adjust any of the theme files directly. Whether you install using Hugo modules, as a git submodule or manually include the theme in your themes/ directory, you should always leave these files intact.\nThe correct way to adjust any theme behaviour is by overriding files using Hugo\u0026rsquo;s powerful file lookup order. In summary, the lookup order ensures any files you include in your project directory will automatically take precedence over any theme files.\nFor example, if you wanted to override the main article template in Congo, you can simply create your own layouts/_default/single.html file and place it in the root of your project. This file will then override the single.html from the theme without ever changing the theme itself. This works for any theme files - HTML templates, partials, shortcodes, config files, data, assets, etc.\nAs long as you follow this simple practice, you will always be able to update the theme (or test different theme versions) without worrying that you will lose any of your custom changes.\nColour schemes #Congo ships with a number of colour schemes out of the box. To change the basic colour scheme, you can set the colorScheme theme parameter. Refer to the Getting Started section to learn more about the built-in schemes.\nIn addition to the default schemes, you can also create your own and re-style the entire website to your liking. Schemes are created by by placing a \u0026lt;scheme-name\u0026gt;.css file in the assets/css/schemes/ folder. Once the file is created, simply refer to it by name in the theme configuration.\nCongo defines a three-colour palette that is used throughout the theme. The three colours are defined as neutral, primary and secondary variants, each containing ten shades of colour.\nDue to the way Tailwind CSS 3.0 calculates colour values with opacity, the colours specified in the scheme need to conform to a particular format by providing the red, green and blue colour values.\n:root { --color-primary-500: 139, 92, 246; } This example defines a CSS variable for the primary-500 colour with a red value of 139, green value of 92 and blue value of 246.\nUse one of the existing theme stylesheets as a template. You are free to define your own colours, but for some inspiration, check out the official Tailwind colour palette reference.\nOverriding the stylesheet #Sometimes you need to add a custom style to style your own HTML elements. Congo provides for this scenario by allowing you to override the default styles in your own CSS stylesheet. Simply create a custom.css file in your project\u0026rsquo;s assets/css/ folder.\nThe custom.css file will be minified by Hugo and loaded automatically after all the other theme styles which means anything in your custom file will take precedence over the defaults.\nAdjusting the font size #Changing the font size of your website is one example of overriding the default stylesheet. Congo makes this simple as it uses scaled font sizes throughout the theme which are derived from the base HTML font size. By default, Tailwind sets the default size to 12pt, but it can be changed to whatever value you prefer.\nCreate a custom.css file using the instructions above and add the following CSS declaration:\n/* Increase the default font size */ html { font-size: 13pt; } Simply by changing this one value, all the font sizes on your website will be adjusted to match this new size. Therefore, to increase the overall font sizes used, make the value greater than 12pt. Similarly, to decrease the font sizes, make the value less than 12pt.\nBuilding the theme CSS from source #If you\u0026rsquo;d like to make a major change, you can take advantage of Tailwind CSS\u0026rsquo;s JIT compiler and rebuild the entire theme CSS from scratch. This is useful if you want to adjust the Tailwind configuration or add extra Tailwind classes to the main stylesheet.\nNote: Building the theme manually is intended for advanced users. Let\u0026rsquo;s step through how building the Tailwind CSS works.\nTailwind configuration #In order to generate a CSS file that only contains the Tailwind classes that are actually being used the JIT compiler needs to scan through all the HTML templates and Markdown content files to check which styles are present in the markup. The compiler does this by looking at the tailwind.config.js file which is included in the root of the theme directory:\n// themes/congo/tailwind.config.js module.exports = { content: [ \u0026#34;./layouts/**/*.html\u0026#34;, \u0026#34;./content/**/*.{html,md}\u0026#34;, \u0026#34;./themes/congo/layouts/**/*.html\u0026#34;, \u0026#34;./themes/congo/content/**/*.{html,md}\u0026#34;, ], // and more... }; This default configuration has been included with these content paths so that you can easily generate your own CSS file without needing to modify it, provided you follow a particular project structure. Namely, you have to include Congo in your project as a subdirectory at themes/congo/. This means you cannot easily use Hugo Modules to install the theme and you must go down either the git submodule (recommended) or manual install routes. The Installation docs explain how to install the theme using either of these methods.\nProject structure #In order to take advantage of the default configuration, your project should look something like this\u0026hellip;\n. ├── assets │ └── css │ └── compiled │ └── main.css # this is the file we will generate ├── config # site config │ └── _default ├── content # site content │ ├── _index.md │ ├── projects │ │ └── _index.md │ └── blog │ └── _index.md ├── layouts # custom layouts for your site │ ├── partials │ │ └── extend-article-link.html │ ├── projects │ │ └── list.html │ └── shortcodes │ └── disclaimer.html └── themes └── congo # git submodule or manual theme install This example structure adds a new projects content type with its own custom layout along with a custom shortcode and extended partial. Provided the project follows this structure, all that\u0026rsquo;s required is to recompile the main.css file.\nInstall dependencies #In order for this to work you\u0026rsquo;ll need to change into the themes/congo/ directory and install the project dependencies. You\u0026rsquo;ll need npm on your local machine for this step.\ncd themes/congo npm install Run the Tailwind compiler #With the dependencies installed all that\u0026rsquo;s left is to use Tailwind CLI to invoke the JIT compiler. Navigate back to the root of your Hugo project and issue the following command:\ncd ../.. ./themes/congo/node_modules/tailwindcss/lib/cli.js -c ./themes/congo/tailwind.config.js -i ./themes/congo/assets/css/main.css -o ./assets/css/compiled/main.css --jit It\u0026rsquo;s a bit of an ugly command due to the paths involved but essentially you\u0026rsquo;re calling Tailwind CLI and passing it the location of the Tailwind config file (the one we looked at above), where to find the theme\u0026rsquo;s main.css file and then where you want the compiled CSS file to be placed (it\u0026rsquo;s going into the assets/css/compiled/ folder of your Hugo project).\nThe config file will automatically inspect all the content and layouts in your project as well as all those in the theme and build a new CSS file that contains all the CSS required for your website. Due to the way Hugo handles file hierarchy, this file in your project will now automatically override the one that comes with the theme.\nEach time you make a change to your layouts and need new Tailwind CSS styles, you can simply re-run the command and generate the new CSS file. You can also add -w to the end of the command to run the JIT compiler in watch mode.\nMake a build script #To fully complete this solution, you can simplify this whole process by adding aliases for these commands, or do what I do and add a package.json to the root of your project which contains the necessary scripts\u0026hellip;\n// package.json { \u0026#34;name\u0026#34;: \u0026#34;my-website\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;server\u0026#34;: \u0026#34;hugo server -b http://localhost -p 8000\u0026#34;, \u0026#34;dev\u0026#34;: \u0026#34;NODE_ENV=development ./themes/congo/node_modules/tailwindcss/lib/cli.js -c ./themes/congo/tailwind.config.js -i ./themes/congo/assets/css/main.css -o ./assets/css/compiled/main.css --jit -w\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;NODE_ENV=production ./themes/congo/node_modules/tailwindcss/lib/cli.js -c ./themes/congo/tailwind.config.js -i ./themes/congo/assets/css/main.css -o ./assets/css/compiled/main.css --jit\u0026#34; }, // and more... } Now when you want to work on designing your site, you can invoke npm run dev and the compiler will run in watch mode. When you\u0026rsquo;re ready to deploy, run npm run build and you\u0026rsquo;ll get a clean Tailwind CSS build.\n🙋‍♀️ If you need help, feel free to ask a question on GitHub Discussions.\n","date":"8 agosto 2020","permalink":"/posts/advanced-customisation/","section":"","summary":"Congo supports advanced customisations that include modifying the underlying Tailwind configuration, building the theme manually and providing custom CSS.","title":"Advanced Customisation"},{"content":"","date":null,"permalink":"/tags/css/","section":"Tags","summary":"","title":"Css"},{"content":"","date":null,"permalink":"/tags/docs/","section":"Tags","summary":"","title":"Docs"},{"content":"Um dos maiores desafios atuais dos desenvolvedores é a implementação agnóstica aos ambientes disponíveis. Mas isso, infelizmente, nem sempre é a realidade, principalmente se você utiliza o Linux em seu desktop ou notebook, e necessita fazer testes em ambientes Windows. Para resolver tais problemas diversos são disponíveis, e grande parte delas envolvem tecnologias de virtualizações de ambientes. Dois são os aplicativos principais no mercado atualmente, o VMWare e o Virtualbox, e por motivos de sinergia entre as ferramentas disponíveis(Vagrant), utilizaremos o VirtualBox.\nNosso primeiro passo será adicionar o repositório do VirtualBox à nossa lista de repositórios, executando o comando abaixo.\necho \u0026#34;deb http://download.virtualbox.org/virtualbox/debian $(lsb_release -cs) contrib\u0026#34; \u0026gt; /etc/apt/sources.list.d/virtualbox.list Adicionado o repositório, também precisamos adicionar sua chave, validando sua confiabilidade. Para tal, execute o comando abaixo.\nwget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | sudo apt-key add - wget -q -O - http://download.virtualbox.org/virtualbox/debian/oracle_vbox.asc | apt-key add - Incluído o repositório e sua chave, é hora de avisar ao apt que existe um repositório novo a ser lido, atualizando sua lista, e instalar o pacote:\nsudo apt update --fix-missing \u0026amp;\u0026amp; apt install virtualbox-5.1 O pacote do VirtualBox encontra-se instalado, porém é necessário instalar suas extensões para ter acesso a diversos recursos disponíveis do pacote, como habilitar dispositivos USB nas máquinas convidadas, diretórios compartilhados, melhorias nos dispositivos gráficos, entre outros.\nPara tal, execute a linha de comando abaixo, que baixará a última versão disponível neste data, no site do VirtualBox.\nhttp://download.virtualbox.org/virtualbox/5.1.22/Oracle_VM_VirtualBox_Extension_Pack-5.1.22-115126.vbox-extpack Baixado o arquivo, execute o comando abaixo para instalá-lo!\nsudo VBoxManage extpack install Oracle_VM_VirtualBox_Extension_Pack-5.1.22-115126.vbox-extpack --replace ","date":"22 junho 2017","permalink":"/posts/20170622-instalando-o-virtualbox-no-ubuntu/","section":"","summary":"Um dos maiores desafios atuais dos desenvolvedores é a implementação agnóstica aos ambientes disponíveis. Mas isso, infelizmente, nem sempre é a realidade, principalmente se você utiliza o Linux em seu desktop ou notebook, e necessita fazer testes em ambientes Windows.","title":"Instalando o virtualbox 5.1 no ubuntu"},{"content":"","date":null,"permalink":"/categories/ops/","section":"Categories","summary":"","title":"Ops"},{"content":"","date":null,"permalink":"/tags/ubuntu/","section":"Tags","summary":"","title":"Ubuntu"},{"content":"","date":null,"permalink":"/tags/virtualbox/","section":"Tags","summary":"","title":"Virtualbox"},{"content":"Sobre #","date":"1 janeiro 0001","permalink":"/about/","section":"","summary":"Sobre #","title":""},{"content":" Sequence diagram Sequence diagram ","date":"1 janeiro 0001","permalink":"/posts/o-mundo-nao-e-dos-espertos/","section":"","summary":" Sequence diagram Sequence diagram ","title":"O mundo nao é dos espertos"}]